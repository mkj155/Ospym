package com.osdepym.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.osdepym.dto.AutorizacionDocDTO;
import com.osdepym.dto.EspecialidadDTO;
import com.osdepym.dto.FamiliaresACargoDTO;
import com.osdepym.dto.PrestacionDTO;
import com.osdepym.form.AutorizacionForm;
import com.osdepym.service.AutorizacionService;

@Controller
public class AutorizacionController {
	
	@Autowired
	@Qualifier("AutorizacionService")
	private AutorizacionService service;
	
	@RequestMapping(value = "/autorizacion/{idAfiliado}", method = RequestMethod.GET)
	public ModelAndView loadAuthorizationForm(@PathVariable(value = "idAfiliado") String idAfiliado, Model model) {
		ModelAndView view = getAuthorizationFormView(model, new AutorizacionForm(), idAfiliado);
		return view;
	}
	
	@RequestMapping(value = "/autorizacion/send", method = RequestMethod.POST)
	public ModelAndView submitAuthorizationForm(@ModelAttribute("autorizacionForm") @Validated AutorizacionForm autorizacionForm, BindingResult result, Model model, final RedirectAttributes redirectAttributes) {
		ModelAndView view = null;
		try {
			if (result.hasErrors()) {
				view = getAuthorizationFormView(model, autorizacionForm, autorizacionForm.getIdAfiliado());
			} else {
				autorizacionForm.setNombreAfiliado("test nmombre afiliado");
				String numeroTramite = service.procesarContacto(autorizacionForm);
				view = new ModelAndView("autorizacionConExito");
				view.addObject("numeroTramite", numeroTramite);
				redirectAttributes.addFlashAttribute("css", "success");
			}
		} catch (Exception e) {
			view = new ModelAndView("error");
			view.addObject("error", e);
		}
		return view;	
	}
	
	@RequestMapping(value = "autorizacion/getFamiliaresACargo")
	public @ResponseBody List<FamiliaresACargoDTO> getFamiliaresACargo() {
		List<FamiliaresACargoDTO> familiaresACargo = null;
		try {
			familiaresACargo = /*service.*/getFamiliaresACargoTest();
		} catch (Exception e) {
			
		}
		return familiaresACargo;
	}
	
	@RequestMapping(value = "autorizacion/getEspecialidades")
	public @ResponseBody List<EspecialidadDTO> getEspecialidades() {
		List<EspecialidadDTO> especialidades = null;
		try {
			especialidades = /*service.*/getEspecialidadesTest();
		} catch (Exception e) {
			
		}
		return especialidades;
	}
	
	@RequestMapping(value = "autorizacion/getPrestaciones")
	public @ResponseBody List<PrestacionDTO> getPrestaciones() {
		List<PrestacionDTO> prestaciones = null;
		try {
			prestaciones = /*service.*/getPrestacionesTest();
		} catch (Exception e) {
			
		}
		return prestaciones;
	}
	
	@RequestMapping(value = "autorizacion/*/getDocumentos")
	public @ResponseBody List<String> getDocumentos(@RequestBody AutorizacionDocDTO obj) {
		List<String> documentos = null;
		try {
			documentos = /*service.*/getDocumentosTest(obj.getIdEspecialidad(), obj.getIdPrestacion());
		} catch (Exception e) {
		}
		return documentos;
	}
	
	@RequestMapping(value = "autorizacion/getDocumentos")
	public @ResponseBody List<String> getDocumentosAfterError(@RequestBody AutorizacionDocDTO obj) {
		List<String> documentos = null;
		try {
			documentos = /*service.*/getDocumentosTest(obj.getIdEspecialidad(), obj.getIdPrestacion());
		} catch (Exception e) {
		}
		return documentos;
	}
	

	@RequestMapping(value = "/autorizacion/getPrestaciones")
	public @ResponseBody List<PrestacionDTO> getPrestacionesByEspecialidadId(@RequestBody String idEspecialidad) {
		List<PrestacionDTO> prestaciones = null;
		try {
			prestaciones = service.getPrestacionesByEspecialidadId(Integer.parseInt(idEspecialidad));
		} catch (Exception e) {
		}
		return prestaciones;
	}
	
	
	
	
	private ModelAndView getAuthorizationFormView(Model model, AutorizacionForm form, String idAfiliado) {
		ModelAndView view = null;
		try {
			view = new ModelAndView("autorizacion");
			view.addObject("familiaresACargo", getFamiliaresACargo());
			view.addObject("prestaciones", getPrestaciones());
			view.addObject("especialidades", service.getAllEspecialidades());
			form.setIdAfiliado(idAfiliado);
			model.addAttribute("autorizacionForm", form);
		} catch (Exception e) {
			view = new ModelAndView("error");
			view.addObject("error", e);
		}
		return view;
	}
	
	private List<FamiliaresACargoDTO> getFamiliaresACargoTest() {
		List<FamiliaresACargoDTO> x = new ArrayList<FamiliaresACargoDTO>();
		x.add(new FamiliaresACargoDTO(1, 1, "Familiar 1", "A cargo 1"));
		x.add(new FamiliaresACargoDTO(2, 1, "Familiar 2", "A cargo 2"));
		x.add(new FamiliaresACargoDTO(3, 1, "Familiar 3", "A cargo 3"));
		x.add(new FamiliaresACargoDTO(4, 1, "Familiar 4", "A cargo 4"));
		x.add(new FamiliaresACargoDTO(5, 1, "Familiar 5", "A cargo 5"));
		return x;
	}
	
	private List<EspecialidadDTO> getEspecialidadesTest() {
		List<EspecialidadDTO> x = new ArrayList<EspecialidadDTO>();
		x.add(new EspecialidadDTO(1, "Especialidad 1"));
		x.add(new EspecialidadDTO(2, "Especialidad 2"));
		x.add(new EspecialidadDTO(3, "Especialidad 3"));
		x.add(new EspecialidadDTO(4, "Especialidad 4"));
		x.add(new EspecialidadDTO(5, "Especialidad 5"));
		return x; 
	}
	
	private List<PrestacionDTO> getPrestacionesTest() {
		List<PrestacionDTO> x = new ArrayList<PrestacionDTO>();
		x.add(new PrestacionDTO(1, "Prestación 1"));
		x.add(new PrestacionDTO(2, "Prestación 2"));
		x.add(new PrestacionDTO(3, "Prestación 3"));
		x.add(new PrestacionDTO(4, "Prestación 4"));
		x.add(new PrestacionDTO(5, "Prestación 5"));
		return x;
	}
	
	private List<String> getDocumentosTest(int idEspecialidad, int idPrestacion) {	
		List<String> x = new ArrayList<String>();
		
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				if(i == idEspecialidad && j == idPrestacion)
					x.add("Test " + i + ":" + j);
			}
		}
		
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				if(i == idEspecialidad && j == idPrestacion)
					x.add("Test " + i + ":" + j);
			}
		}
		
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				if(i == idEspecialidad && j == idPrestacion)
					x.add("Test " + i + ":" + j);
			}
		}
		
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				if(i == idEspecialidad && j == idPrestacion)
					x.add("Test " + i + ":" + j);
			}
		}
		
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				if(i == idEspecialidad && j == idPrestacion)
					x.add("Test " + i + ":" + j);
			}
		}
		
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				if(i == idEspecialidad && j == idPrestacion)
					x.add("Test " + i + ":" + j);
			}
		}
		
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				if(i == idEspecialidad && j == idPrestacion)
					x.add("Test " + i + ":" + j);
			}
		}
		
		return x;
	}
}
